headline,mainEntityOfPage,image,datePublished,dateModified,author,media_en,media_jp,str_count,body,images,external_links
【第62回】LM StudioでPythonのGUIコードを生成させたら殊の外優秀だった（PC Watch）,https://news.yahoo.co.jp/articles/a59dfcc5e4b0087abb0b75d05cbd76e449c722ef,https://newsatcl-pctr.c.yimg.jp/t/amd-img/20241026-00000016-imppcw-000-1-view.jpg?exp=10800,2024-10-26T06:18:26+09:00,2024-10-26T06:18:26+09:00,PC Watch,imppcw,PC Watch,6969,"\n写真：PC Watch\n筆者はプログラマーというわけではないが、たまにプログラムを書く。主に使用する言語はPythonだ。\n【画像】「追加のドライバー」でバージョン550を使用していることを確認しているところ\nとはいえ、ライブラリをいい感じに組み合わせて動かしているだけで、それをプログラムと呼んでいいのか自分でも葛藤があるくらいだ。自信はまったくないし、各ライブラリの作者にいくら感謝してもし足りない。\n\n GUIを表示するアプリケーションはあまり書く機会がないものの、ゼロではない。そういった際には、PythonデフォルトのGUIライブラリであるtkinterを使用している。正直なところ見た目はあまりよくないが、情報が豊富でライセンスに関してあまり難しく考えなくてもいいところが気に入っている。\n\n もともとプログラム自体が得意というわけではないので、何であってもGUIをイチから書くというのはなかなかにしんどく、本を買って勉強したりしたものの、苦手感を払拭するには至っていない。まぁそれでも書くのだが。\n\n ある日、本誌の担当編集である劉デスクからLM StudioというローカルLLMを動作させるアプリケーションを紹介された。いろいろと遊んでいるうちに、こいつでGUIを生成させてみるとどのくらいの精度のものができるか気になった。そして、今回の記事がその成果となる。\n\n■ 今回使用するハードウェアとソフトウェア\n\n 今回使用するハードウェアは次の通りだ。\n\n なんのことはない筆者の検証用PCだが、ポイントはGeForce RTX 3060を使用しているところだ。今回はNVIDIAのVRAMを12GB以上搭載したdGPUをターゲットとする。VRAMが8GB以下では、実用的なLLMを動作させるにはやや心許ない。\n\n 執筆時点でのSystem Requirementsによると、Ubuntuのバージョンは20.04 LTSと22.04 LTSで、それより新しいバージョンはあまりテストしていないということだ。したがって今回は22.04 LTSを使用する。\n\n 事前にプロプライエタリなドライバをインストールしておこう。「追加のドライバー」で確認できる。\n\n■ ダウンロードと実行\n\n LM Studioはインストール不要なAppImageという形式で提供されている。AppImageに関しては第4回で紹介しているので、ここでは繰り返さない。\n\n LM StudioのサイトからLinux版をダウンロードしよう。\n\n ただし実行するにはlibfuse2というパッケージが必要なので、起動前にインストールしておこう。\n\n 実行するにはダウンロードしたファイルを右クリックして「アクセス権」にある「プログラムとして実行」にチェックを入れ、閉じたあとダブルクリックするだけだ。\n\n■ 設定の確認とモデルのダウンロード\n\n 起動したら、右上の「Skip onboarding」をクリックしてウィザードを飛ばしてしまおう。紹介の都合上その方がいいからで、そのまま進んでしまって何か問題があるわけではない。\n\n 通常の画面に遷移したら、何はなくとも右下の歯車をクリックする。\n\n 「App Settings」が開くので、まずは「言語」を「日本語 (Beta)」に変更しよう。\n\n 続いて「Runtimes」をクリックし、「CUDA llama.cpp」が選択されていることを確認しよう。このようになっていない場合、NVIDIAのプロプライエタリなドライバが正しくインストールされていないことが考えられる。\n\n 「Model Search」をクリックし、モデル(いうまでもなくLLMのMだ)をダウンロードする。今回は「Qwen2.5-14B-Instruct」をダウンロードする。9GBくらいあるので、それなりに時間がかかるだろう。サブウィンドウが表示され、進捗が表示されるのは分かりやすい。\n\n 14B、14ビリオン、すなわち140億パラメータから構成されている。この規模のLLMを動かそうとすると、VRAMが12GB以上必要だ。よって最低でもGeForce RTX 3060程度は必要となる。少ないパラメータ数でコードに特化したQwen2.5-Coder-7B-Instructもあるが、やはりパラメータ数が少ないのはいかんともしがたく、あまりおすすめできないと判断した。\n\n ダウンロードが完了し、モデルを読み込むと使用可能となる。その際に「GPUオフロード」を最大値にするを忘れないでおこう。\n\n■ tkinterのウィンドウを生成する\n\n では実際にtkinterを用いたPythonのコードを生成していく。\n\n ここでは、ボタンをクリックするとクリックしたボタンのメッセージが下部に表示されるウィンドウを作成することにする。具体的には次のようなものだ。\n\n これをゴールに、最初に入力したのは「tkinterでボタンが2つあるウィンドウのソースコードを教えてください。なおボタンはgridで横に並べてください。ウィンドウサイズを変更したら、ボタンの位置も変更するようにしてください。」だ。\n\n 生成したコードをgeditなどで保存する。ここではファイル名を「sampledialog.py」とする。動作確認のため、端末を起動しtkinterをインストールする。具体的にはsudo apt install python3-tkを実行しよう。\n\n 完了後、python3 sampledialog.pyを実行すると、次のようなウィンドウが表示された。\n\n なんと、ウィンドウが2つ表示されてしまっている。実はありがちなミスなので、「ウィンドウが2つ表示されています。1つは不要です。」と入力してやり直してもらう。\n\n 無事に修正された。ボタンの距離が近すぎるので、「ボタンの左右に等間隔のスペースがほしいです」と入力した。\n\n ボタンの左側にはスペースができたが、右側にもほしい。「ボタンの右側にも等間隔のスペースを入れてください」と入力した。\n\n これだと何をしてほしいウィンドウかわからないので、「ボタンの上に、「どちらかのボタンをクリックしてください」というメッセージを追加してください」と入力した。\n\n 「ボタンをクリックしたら、ボタンの下にテキストを表示するようにしてください。テキストの内容はボタンに書かれているものと同一にしてください」と入力し、完成形に近づけた。\n\n ボタンをクリックすると次のようになった。\n\n 下に余白がほしいので、「ボタンの下のテキストの下にもう少し余白がほしいです」と入力した。\n\n ウィンドウとしてはこれで完成だ。\n\n この段階でのソースコードを見てみよう。\n\nimport tkinter as tk\n\ndef create_button_panel(root):\n#\nボタンパネルを作成するフレーム\nbutton_frame = tk.Frame(root)\n#\n5つの列を定義: 左のマージン, ボタン1, 中央の余白, ボタン2, 右のマージン\nfor col in range(5):\nbutton_frame.grid_columnconfigure(col, weight=1)\n#\n各列に均等な重みを設定\n#\nメッセージラベルを作成\nmessage_label = tk.Label(button_frame, text=""どちらかのボタンをクリックしてください"", pady=10)\nmessage_label.grid(row=0, columnspan=5)\n#\n余白フレーム作成\nleft_margin = tk.Frame(button_frame, width=50)\n#\n左端の余白\nright_margin = tk.Frame(button_frame, width=50)\n#\n右端の余白\ncentral_margin = tk.Frame(button_frame, width=50)\n#\n中央の余白\n#\nボタンを作成\ndef button_action(text):\nlabel_text.set(text)\n\nlabel_text = tk.StringVar()\n\nbutton1_label = ""Button 1""\nbutton2_label = ""Button 2""\n\nbutton1 = tk.Button(button_frame, text=button1_label, command=lambda: button_action(button1_label))\nbutton2 = tk.Button(button_frame, text=button2_label, command=lambda: button_action(button2_label))\n#\nテキストラベルを作成\nlabel = tk.Label(button_frame, textvariable=label_text)\n#\n左端の余白フレーム配置\nleft_margin.grid(row=1, column=0, sticky='nsew')\n#\nボタン配置\nbutton1.grid(row=1, column=1, sticky=tk.W+tk.E)\ncentral_margin.grid(row=1, column=2, sticky='nsew')\n#\n中央の余白フレーム配置\nbutton2.grid(row=1, column=3, sticky=tk.W+tk.E)\n\nlabel.grid(row=2, columnspan=5)\n#\nテキストラベルを下部に配置\n#\n下部の余白フレームを作成と配置\nbottom_margin = tk.Frame(button_frame, height=20)\nbottom_margin.grid(row=3, columnspan=5, sticky='ew')\n#\n下部の余白\n#\n右端の余白フレーム配置\nright_margin.grid(row=1, column=4, sticky='nsew')\n\nreturn button_frame\n#\nTkinter のルートウィンドウを作成\nroot = tk.Tk()\nroot.title(""Button Dialog"")\n#\nボタンパネルをメインウィンドウに配置\nbutton_panel = create_button_panel(root)\nbutton_panel.pack(fill=tk.X)\n#\nX 方向（幅）に張り出すように表示\n#\nTkinter イベントループを開始\nroot.mainloop()\n\n 関数の中に関数があるという、Pythonのソースコードとしてはかなり違和感があるものであった。よって「関数の中に関数があるのは不自然ではないでしょうか」とお願いしたら、何回かは動かない(エラーを出力する)ソースコードを出力し続け、根気強くエラーを提示して修正をお願いすると、最終的に次のようなソースコードを出力した。\n\nimport tkinter as tk\n\ndef handle_button_click(label_var, button_text):\ndef inner():\nlabel_var.set(button_text)\nreturn inner\n\ndef create_button_panel(root):\n#\nボタンパネルを作成するフレーム\nbutton_frame = tk.Frame(root)\n#\n5つの列を定義: 左のマージン, ボタン1, 中央の余白, ボタン2, 右のマージン\nfor col in range(5):\nbutton_frame.grid_columnconfigure(col, weight=1)\n#\n各列に均等な重みを設定\n#\nメッセージラベルを作成\nmessage_label = tk.Label(button_frame, text=""どちらかのボタンをクリックしてください"", pady=10)\nmessage_label.grid(row=0, columnspan=5)\n\nlabel_text = tk.StringVar()\n#\nStringVar を使用してテキスト変更を管理\n#\nテキストラベルを作成\nlabel = tk.Label(button_frame, textvariable=label_text)\n#\n初期設定時は空白文字列を設定\n\nlabel.config(pady=5)\n#\n余白を追加\n\nlabel.grid(row=2, columnspan=5)\n#\nテキストラベルを下部に配置\n#\n余白フレーム作成\nleft_margin = tk.Frame(button_frame, width=50)\n#\n左端の余白\ncentral_margin = tk.Frame(button_frame, width=50)\n#\n中央の余白\nright_margin = tk.Frame(button_frame, width=50)\n#\n右端の余白\n#\nボタンを作成\nbutton1_label = ""Button 1""\nbutton2_label = ""Button 2""\n\nbutton1 = tk.Button(button_frame, text=button1_label, command=handle_button_click(label_text, button1_label))\nbutton2 = tk.Button(button_frame, text=button2_label, command=handle_button_click(label_text, button2_label))\n#\n左端の余白フレーム配置\nleft_margin.grid(row=1, column=0, sticky='nsew')\n#\nボタン配置\nbutton1.grid(row=1, column=1, sticky=tk.W+tk.E)\n\ncentral_margin.grid(row=1, column=2, sticky='nsew')\n#\n中央の余白フレーム配置\n\nbutton2.grid(row=1, column=3, sticky=tk.W+tk.E)\n#\n右端の余白フレーム配置\nright_margin.grid(row=1, column=4, sticky='nsew')\n\nreturn button_frame\n#\nTkinter のルートウィンドウを作成\nroot = tk.Tk()\nroot.title(""Button Dialog"")\n#\nボタンパネルをメインウィンドウに配置\nbutton_panel = create_button_panel(root)\nbutton_panel.pack(fill=tk.X)\n#\nX 方向（幅）に張り出すように表示\n#\nTkinter イベントループを開始\nroot.mainloop()\n\n マージンをforで確保するなどギョッとする部分もあるが、Pythonのソースコードを1箇所も手修正することなくこの精度のものができたのは驚愕しかない。\n\n なお、同じ文章を入力しても生成されるソースコードには違いが出るようで、気に入るソースコードが出力されるまで何回も試すという手も取れそうだ。\n\n メンテナンスのことを考えるとこのソースコードをそのまま使うのは難しいかもしれないが、ひとまずこんなものを作りたいというプロトタイピングにはぴったりだ。\n\n 第58回のような記事を書いておいて何だが、筆者はAI PCには懐疑的な立場であった。しかし自分で実際に動かしてみると、これはもう可能性しか感じない。高価なGPUを用意せずともいいようにNPUの性能が向上し、それがUbuntuでも手軽に使えるわりと近いであろう将来に期待したい。\nPC Watch,Ubuntu Japanese Team あわしろいくや",['https://newsatcl-pctr.c.yimg.jp/t/amd-img/20241026-00000016-imppcw-000-1-view.jpg?exp=10800'],"['https://news.yahoo.co.jp/articles/a59dfcc5e4b0087abb0b75d05cbd76e449c722ef/images/000', 'https://pc.watch.impress.co.jp/img/pcw/docs/1634/522/html/01.png.html', 'https://news.yahoo.co.jp/search?p=%23&source=article-body']"
AIの手先として働くウェアラブルデバイス（PC Watch）,https://news.yahoo.co.jp/articles/779a6218e27bed25c2280b640040f21edd912fe2,https://newsatcl-pctr.c.yimg.jp/t/amd-img/20241026-00000017-imppcw-000-1-view.jpg?exp=10800,2024-10-26T06:23:24+09:00,2024-10-26T06:23:24+09:00,PC Watch,imppcw,PC Watch,3441,"\n写真：PC Watch\nウェアラブルデバイスの多くはセンサー等を統合することで人間の感覚を拡張するとともに、人間自身では知覚しえない情報を四六時中集め続け、近い将来、自分の身体に起こるであろう出来事を予測するなどで人々の暮らしに貢献している。今回は、自分が参加している会話や会議、ミーティングといった音声コミュニケーションへのウェアラブルデバイス活用について考えてみる。\n\n■ 日常生活のデータをAIサービスが強化\n\n 高性能AIボイスレコーダメーカーとして知られるNicebuildが、「PLAUD NotePin(プラウド ノートピン)」発表した。予約はすでに開始されていて、12月上旬に正式に発売が開始される。世界で最初にOpenAIのGPT-4oを搭載したポータブル型ウェアラブルAIメモリーカプセルだという。今回は、発売前の製品を使う機会を得た。\n\n ただ、GPT-4o搭載という言い方はちょっと大げさだ。実際には、重さ25gのカプセル状のデバイスで、2つのMEMSマイクを内蔵し、64GBまでの音声データを記録することができるようになっている。カプセルは同梱されたマグネットピン、クリップ、ネックストラップ、リストバンドのアタッチメントをつけて、それぞれの装着方法を使いわけられる。内蔵バッテリでの連続録音は20時間、また、録音しない場合は40日間スタンバイできる。デバイスローカルでのノイズキャンセリングによってクリアな録音ができるのもいい。\n\n 録音したデータはスマホのアプリがBluetoothで受け取り、それを手動または自動でクラウドに転送する。データ量、つまり録音時間が長くサイズが大きい場合には、Wi-Fiによる高速転送もサポートする。こちらは、本体が臨時のアクセスポイントになり、アプリからそこに接続すると自動転送が始まるようになっている。\n\n そして、クラウドサービスとして提供されているOpenAIのGPT-4oの処理によって話者識別対応の文字起こしがされ、外国語が混じっていればそこは翻訳して提示され、内容の要約やマインドマップが得られるサービスが付帯する。1時間の会話なら約5分で文字起こしと要約が生成される。明示的にストレージ保存を指示しない限り、これらのデータはスマホアプリ内にしか残らない。\n\n 同社によれば、デジタル化されたデータとウェアラブルデバイスが集める日常生活のデータをAIサービスが強化することで、効率や生産性、生活や仕事の質の向上に貢献するという建て付けだ。\n\n なので、AI内蔵ボイスレコーダというよりは、AIサービスを統合したデバイスというの置付けになる。文字起こしについては毎月300分まで無料でサービスが提供されるほか、年間一括(1万2,000円)や月額払い(1,980円)で1,200分の有料サービスがある。この仕様なら起きている時間すべてを録音するドラレコ的な使い方もできそうだとも考えたが、本気で使うなら有償サービスの20時間でもちょっと無理そうだ。\n\n■ AIと現実社会を結びつける\n\n 発表会に登壇したNicebuild ジャパンカントリーマネージャーのWatson Zhang氏は、同社がAIと現実社会を結びつける企業であるとし、サービスとしてのAIを突き詰めていった結果、デバイスで集めたデータをエージェントを使って強化する方法論に行き着いたという。\n\n 先行製品のClaudNoteは昨2023年6月に出荷開始され、すでに25万人が利用中で、日本市場はその2割を占めるそうだ。\n\n 注目すべきはAsk AIのサービスだ。文字起こし原稿をAIに食わせて、そこに含まれる情報をもとに回答させることができるのだから、生成AI利用のパターンとしては、当たり前といえば当たり前なのだが、必要な情報を即座に取得できることや、録音内容から情報を抽出してその場で回答できる様子は知らない人が見たら魔法のようだ。\n\n 今はまだ録音セッション単位での質問にしか答えられないが、将来的には複数のセッションを串刺ししての質問にも答えられるようになるという。だからこそ、24時間365日のパーソナルコミュニケーションをすべて記録し、自分がいつ何をしたのか、何を言ったのか、TVやラジオでどんな情報を耳にし、どんな音楽を聴いたのかなどのライフロガーとしての使い方ができればおもしろいのにと思う。AIの無駄遣いと言われるようなことをやってみたい。もっともそこでは録音対象となる相手の承諾や知財などの問題もクリアしなければならないだろうから、けっこう大変なことだとは思う。\n\n■ デバイスのUXにもう一工夫欲しかった\n\n カプセル状のレコーダデバイスは実に小さい。ネクタイピンのようにもなるので、シャツのエリに止めてもいいし、脱落が不安ならネックストラップを利用すればいい。細いストラップが付属するが、カプセル本体にはストラップホールがあるので、好きなストラップを調達して使ってもいい。\n\n 本体の充電には、同梱のクレードルが必要だ。本体と同じくらいのサイズの平たいもので、USB Type-Cケーブルを装着し、そのクレードルに本体を乗せて充電する。本体がマグネットで吸着し、接点が接触することで充電がスタートする。なので出張や旅行などのときにクレードルを忘れたらアウトだ。ここはひとつ、なんとか本体にUSB Type-Cポートを実装してほしかったがフル充電で20時間は録音できるというので満充電ならそれほどの心配はないかもしれない。\n\n 使い方としては電源を入れたままで待ち受け携帯し、必要に応じて録音をオン/オフするといったことになるだろう。\n\n 本体に物理スイッチはない。中央部がタッチセンサーとなっていて、そこを長押しすると電源がオンになるようだ。どうにもそのときのステータスが分かりにくく、録音されているかどうかが不安になってしまう。電源オフという状態があるのかどうかもよく分からない。\n\n タッチセンサーがボタンであるというのも原因のひとつだとは思う。押したときにバイブするといった工夫はあるのだが、もう少しなんとかしてほしかった。なんならスマホ側からステータスを確認したり、録音のスタート/ストップを制御できるような仕様でもよかった。\n\n 録音内容は、いったんスマホのストレージに記録され、スマホでのアプリ操作によって文字起こし、要約、マインドマップなどの生成を指示すると、音声データがいったんクラウドにアップロードされ、サービス側で処理されて結果がもどってくる。このときに使用するテンプレートとして各種のものを指定できる。また、使うAIについてもデフォルトのGPT-4oのほか、Claude 3.5を指定することができる。\n\n 生成結果の閲覧はスマホでもできるが、Plaud Private Cloud(PPC)というプライベートクラウドストレージに自動的に同期することもできる。この機能を使うと、録音済のデータは逐次、クラウド側にも保存されてバックアップにもなるし、クラウドだけに置いておいてもアプリからは参照できるので、スマホストレージの節約にもなる。\n\n クラウドに保存したデータの参照はPCでできるし、その方が圧倒的に使いやすい。たとえば、生成結果を自分の目でレビューして、修正を加えた上で、要約のやり直しといったこともできるので、より洗練された結果を残すことができる。要約はびっくりするほど賢く分かりやすい。マインドマップも見事だ。もちろん、記録内容をもとにして質問ができるAsk AIも、ブラウザから使った方が効率的だ。\n\n こうしたことができるようになって、これからは、リアルなミーティングに限らず、セミナーを受講したり、基調講演を聴いたり、また、飲み会の会話も録音しちゃえといった層も出てきそうだ。少なくとも対話で手帳やPCにメモをとることはなくなるかもしれない。そっちの方が不確実性が高いからだ。メモをとって記録したつもりになるよりも、必ず記録を再読して確認する習慣をつけたほうがいいとされる可能性もありそうだ。\n\n やっぱりこのままAIは世の中を変えるのかもしれないぞ。\nPC Watch,山田 祥平",['https://newsatcl-pctr.c.yimg.jp/t/amd-img/20241026-00000017-imppcw-000-1-view.jpg?pri=l&w=640&h=360&exp=10800'],['https://news.yahoo.co.jp/articles/779a6218e27bed25c2280b640040f21edd912fe2/images/000']
奥村茉実、過去のレトロゲームの知見を生かして「ハイドライド3」を進める（PC Watch）,https://news.yahoo.co.jp/articles/590290eeca445a088c1a6a98f328d7b2cdee45a2,https://newsatcl-pctr.c.yimg.jp/t/amd-img/20241026-00000015-imppcw-000-1-view.jpg?exp=10800,2024-10-26T06:16:31+09:00,2024-10-26T06:16:31+09:00,PC Watch,imppcw,PC Watch,2387,"\n写真：PC Watch\nみなさんこんにちは、奥村茉実です！今回も引き続き「ハイドライド3S.V.」をプレイしました。ハイドライド3S.V.は、1987年に発売された元祖ハイドライド3のパワーアップバージョンです。1989年にT&E SOFTから発売され、現在Project EGGにて550円で購入可能です。\n【画像】レトロゲームのプレイにはマウスコンピューターさんの「NEXTGEAR J6-A5G60GN-A」を利用させていただいています。主な仕様は、AMD Ryzen 5 7535HS、メモリ16GB、GeForce RTX 4060 Laptop GPU、SSD 500GB、16型フルHD/165Hz液晶を搭載しています\n今回も諸事情により、配信外でプレイをしています。プレイ中の録画もしていないため、アーカイブを上げることもできませんが、今まで通りプレイ中の画面のスクリーンショットは載せています。しばらくはこの形が続くかと思いますが、ご了承ください。\n\n 前回は私の記憶が乏しいせいで、いろいろとやらかしていました……。ただ、レベルを上げたり、未開の地に入れたりと、少しずつではありますが進めてはいるはず(笑)。それでも、配信をしていないこともあり、コメントという救世主がないのがかなりキツイ……。今回はこれまでも見ていたマップや、少しヒントも届いていたので、それらを参考になんとか進めたつもりです……。\n\n まず、前回の終わりから次に何をすればいいかが謎でした。ここでヒントに助けてもらい、何度か来ているお墓を押すと出てくる入り口に向かうことに。そこに入ると「地下の街」につながっています。\n\n ここから「地下の倉庫」へ入れるそうなのですが、それがどこにあるのかが分からず、街の中をウロウロ。この街には、入るだけで2万円取られ、払えなかったら即死というお店があるとの情報はあったので、うかつに色んな所にも入れず(笑)。\n\n そうしていると、端の方にまだ入れていないエリアがあるのを発見しました。入り口の前には門番がいて、そこからは入ることができません。近くを歩いている人に何度も話しかけていると、「この倉庫」というワードを口にした人がいました。ここで私は、この奥に倉庫があるんだと確信。\n\n ただ、どこから入るのやら……。お先真っ暗になりましたが、このゲームには隠し通路があるので、それを狙って倉庫の壁沿いをベタベタに沿って歩きます(笑)。なかなか見つかりませんでしたが、粘って角度も変えて歩いていると、中に入れる壁を発見しました！これは気づかん( 一一)。\n\n そして、その先にはたくさんの宝箱。ヒントによれば、ここでは奥にある宝箱を2回確認すると、地下の倉庫への入り口が出てくるとのことでした。確かに足元に入り口が出現！いやいや、これも初見じゃ分からん( 一一)。早速入ると中は真っ暗。さらに強い敵もいて即死です。\n\n ここからはまたレベル上げですかね……。次のレベルにするには、もう3,500くらいの経験値が必要です。果てしなく遠く感じましたが、ここを超えないと先に進めないので、無心で敵を倒すフェーズに入ります。\n\n ということで、安定の塔の中へ。エレベーターを使って、6階あたりを拠点にします。最初は「小型の弓」で遠距離攻撃をしていましたが、攻撃力自体は「光の剣」の方が高かったので、光の剣に変更。継続的に敵が出てくる場所を見つけたので、ここで3,000近くの経験値を稼ぎます。\n\n さらに今回気を付けたのは、買い物やセーブをするためにわざわざ外に出て最初の街に戻っていましたが、この塔の中にある天空の街でやってもよかったのか(笑)。経験値稼ぎとセーブを繰り返し、あと少しというところで、今度は外の木を使って経験値を稼ぐことにしました。やっと稼いで教会に向かうと、「まだ経験値が足りない」と言われ茫然とします。\n\n 確認すると、あと1足りませんでした(笑)。その後しっかり3,600になったことを確認して、無事レベルを1つ上げることができました。\n\n ここからはまた洞窟に戻りたいのですが、その前に買い物を。最近は食料のほかに、体力回復剤もコスパと重さ的にいいと知ったので、いくつか持つようにしています。\n\n さらに、お店の一覧にずっとあって、いつ使うんだろうと思っていたランプとオイル。これは多分洞窟の中で使うのですわ。前に何かのレトロゲームでも、このセットを買う流れをやったような……。一気に経験値を稼いで財布は潤っていたので、買い物の失敗は一時的だけど怖くありません(笑)。\n\n 久しぶりに戻ってこれた洞窟。ランプにオイルを入れると、見える範囲が少し広くなりました。正直洞窟中が明るくなるのかと期待していたけど(笑)。\n\n ここからは完全に迷路ですが、何かに当たるまでとにかく進みます。ただ、敵が強い。幽霊のような敵や、前に塔にいた細めた目のような敵もいます。さらに、途中で毒にも当たってしまいました。毒に当たると、勝手に自分の体力が減っていきます。お店に売っていた毒消しはこのためか……。\n\n どんどん謎が解き明かされていくのは楽しいですね！洞窟の中をだいぶウロウロしましたが、まだどこにも辿り着くことができていません。ただ敵からは逃げることができたので、レベルはこのままでもよさそうなのですが……。\n\n 今回はここまで！ヒントやマップに助けてもらいながらでしたが、今回も少しは進めたはず。次回はこの洞窟の中でのタスクを終わらせて、どんどん進みたいです。早く配信をして、皆さんと一緒にあーだこーだ言いながらプレイしたい( ゜Д゜)。\nPC Watch,奥村 茉実",['https://newsatcl-pctr.c.yimg.jp/t/amd-img/20241026-00000015-imppcw-000-1-view.jpg?exp=10800'],"['https://news.yahoo.co.jp/articles/590290eeca445a088c1a6a98f328d7b2cdee45a2/images/000', 'https://pc.watch.impress.co.jp/img/pcw/docs/1634/625/html/mouse_o.jpg.html']"
