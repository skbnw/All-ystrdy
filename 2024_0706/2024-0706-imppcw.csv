headline,mainEntityOfPage,image,datePublished,dateModified,author,media_en,media_jp,str_count,body,images,external_links
薄軽強の次にくるもの（PC Watch）,https://news.yahoo.co.jp/articles/18ebf10d5921bcf9bb37332253433fe40434ce02,https://newsatcl-pctr.c.yimg.jp/t/amd-img/20240706-00000019-imppcw-000-1-view.jpg?exp=10800,2024-07-06T06:19:15+09:00,2024-07-06T06:19:15+09:00,PC Watch,imppcw,PC Watch,3902,"\n写真：PC Watch\nVAIOから世界最軽量325gの14型モバイルモニター「VAIO Vision+」が発売された。発売前からしばらく使わせてもらってきたが、まさに軽さは正義、もうこれは別世界だと痛感した。今回は、そのインプレッションをお届けしよう。\n\n■ 薄軽いにもほどがある\n\n 製品としてのVAIO Vision+を最初に見せてもらったとき、筐体を裸で手渡されたときに感じた薄軽さは、思わず「軽っ」と声をあげるほどだった。この感覚はなんとなくデジャブな感じがしたのだが、たぶん、634gの「FCCL LIFEBOOK UH-X/G2」を手にしたときに感じたのと同じものだと思う。\n\n 個人的に24型のモバイルモニターをスーツケースに入れて持ち運んでいた頃のことを思うと、本当にいい時代になったものだ。ちなみに当時は3kg前後の重量でモバイルを主張していたが、それで得られる環境は半端なものではなく、十二分に実用的だった。\n\n あれがフルサイズの等身大Windows環境モバイルだとすれば、14型のモニターサイズがもたらすのはその6割程度のリッチさかもしれない。それでも本当に気軽に持ち運べる機動力はモビリティの真骨頂だといえる。VAIOのサイトには特設ページが用意され、開発者トークが掲載されているが、その中での迫田翼氏(開発本部 ITソリューションセンターソフト設計部 PCソフト課 兼開発本部 プロダクトセンター)の「持ち歩いたけれど使わなかった日でも損した気分にならない」という言葉が印象に残っている。\n\n すでに各ECサイトでは有象無象のメーカーのモバイルモニターが、1.5万円、ひょっとすれば1万円を切るような価格で入手できるようになっている。画質の良し悪しは多少あるにしても、それぞれの製品はそれなりにきちんとしているように見えるし、実際、安物買いの銭失いにはならない印象だ。\n\n そんな中で5万4,800円という価格でモバイルモニターを入手するには、それなりに説得力のある理由が必要になるだろう。自分を納得させるにしても、上司や会社をだますにしてもだ……。\n\n■ これ以上そぎ落としたらモニターじゃなくなる\n\n VAIO Vision+は14型ワイドの液晶モニターで、その解像度はWUXGA(1,920×1,200)。つまり16:10のアスペクト比のモニターだ。表面加工は非光沢で色域はsRGB100%をサポートする。\n\n Windowsは96dpiが想定解像度だから、14型のWUXGAなら168%拡大が必要だ。基本的に25%刻みでしか拡大縮小できないので、Windowsは150%表示を推奨するが、人によっては175%表示がほしいかもしれない。100%表示できる23型超のフルサイズWindows環境に対して、14型のモニターサイズは6割程度のリッチさというのはそういうことだ。\n\n 本体裏にはアルミ製スタンドが実装され、ランドスケープ利用では本体だけで自立させて使える。装備されているのは本体右側面にUSB Type-Cポートが2つ、そして本体左裏に輝度調整用のスライダー、それだけだ。\n\n 2つのポートに機能差はない。どちらを使ってもいい。使っていないポートにUSB PD準拠の電力を供給すると、モニター自身が10Wを使い、残りをもう1つのポートにPCにパススルーする。ただし、パススルーできる上限は60Wまでで、仮に100Wアダプタを使ってもパススルーされるのは60Wだ。\n\n 機能としてはそれだけだ。思い切りがいい。あらゆるものをそぎ落としている。スピーカー等を搭載しているわけでもなければ、HDMI入力ができるわけでもない。だからゲーム機やビデオレコーダをつないで使うには向いていない。2つのUSB Type-Cポートは最初の入力が早い者勝ちで有効になる。2ポート入力を切り替えられるわけではなければ、USB Type-Cハブになるわけでもない。\n\n 入力された1系統の映像を映し出し、パススルー電力を管理する。調整できるのは輝度だけで、それ以外のことは何もできない。色温度やコントラストの調整もできない。本当に思いきった仕様に驚くが、だからこその世界最軽量325gだ。手元の実機は実測で318gだったので余計に軽く感じる。\n\n ランドスケープ利用なら、背面のキックスタンドで自立させられる。あとはUSB Type-CケーブルでPCと接続するだけで、2画面を並べた体制でのマルチモニター環境が手に入る。\n\n 出先で普通に横位置で使うことだけを想定するにしても、携行時の液晶面の保護を考えると、ノートPCと裸で束ねて持ち歩くというのはためらわれる。せめてプチプチ緩衝材を使った封筒などに入れて持ち運びたい。それなら325gに30g程度の追加で済む。これは画期的だ。\n\n■ 本体より重いカバーにはがっかりでも、携行する価値はたっぷりある\n\n ところがVAIO Vision+にはカバースタンドが付属している。のべ20人ほどのメンバーが関わり、試作品を作るところまで進んでいたのにそれを破棄し、ゼロから考え直して作られたという同梱カバースタンドだ。気合いのは入れ方が違う。\n\n このスタンドの役割は、VAIO Vision+を保護して携行するという基本的な役割はもちろんだが、もう1つの機能がある。それは、折り紙のようにトランスフォームし、VAIO Vision+を持ち上げてノートPCの液晶画面の上部にレイアウトするためのスタンドになるというファンクションだ。身の回りのいろいろなガラクタグッズを組み合わせて同じようなことができないか試してみたが無駄な努力だった。\n\n 出張先のホテルの客室などでは、それなりのサイズのデスクスペースがあって、ノートPCの脇に14型程度ならモニターを並べて置くことができるかもしれない。だが、モバイル環境はそんなに恵まれたところばかりではない。注文した飲み物を置いたままにするのも難しいような小ぶりのテーブルで作業しなければならないことも少なくない。そこまでするかといわれそうだが、そうしたほうが準備の時間を入れても仕事が早く終わるのだ。当然、やる。\n\n 限られたフットスペースにできるだけ広い作業領域を確保するには上方への拡張が手っ取り早い。狭い敷地に細長い高層ビルを建てるのと同じ理屈だ。\n\n VAIO Vision+を入れずにカバースタンドを畳み、折り目と磁石での吸引にまかせてカバーを折り曲げると、尾ビレのようになって支え、カバーが縦位置に自立するようになる。その上部にVAIO Vision+を取り付け、VAIO Vision+のキックスタンドで角度を調整すると、手前に置いたノートPCの液晶ディスプレイ上部に、いい感じの仰角でVAIO Vision+をレイアウトできる。\n\n 設置時は、尾びれを手前に向けるところがミソだ。こうすることでカバーは手前に傾く。その上部にVAIO Vision+のキックスタンドを差し込んで角度調整することで、VAIO Vision+の画面をより垂直に近い状態にキープすることができる。\n\n ものすごく考えられたトランスフォームだ。説明書なしでは想像がつかなかったが、分かってしまえば実にシンプルだし、迷いようがない。また、この構造でポートレート利用での固定も裏技としてサポートされている。ただしこれはカバーを裏返して使うため、あくまでも非公式な使い方なんだそうだ。\n\n このカバースタンド、重量が440gある(実測では436gだった)。つまり、VAIO Vision+本体よりも重い。それがモニター2段重ね環境を得るための代償だ。\n\n いろいろ考えた。今どきのノートPCは液晶を最大180度まで開けることが多いので、その状態でノートPCそのものを立てかけて、キーボード部分を覆うようにVAIO Vision+を置いての2段重ねも考えた。その場合、キーボードとポインティングデバイスは別途調達する必要があるし、自立のためのちょっとしたスタンドも必要で本末転倒だ。\n\n VAIO Vision+の325gとカバースタンドの440g、本体だけならともかく、合計765gは「持ち歩いたけれど使わなかった日でも損した気分にならない」というには重すぎる。ケーブルだって40gくらいはある。325gくらいにダイエットした改訂版のカバーがあとで提供されるようなことがあったらと、無理を承知で願いたくなる。それに欲をいえば両端L型プラグの取り回しのいい細いケーブルも欲しいところだ。\n\n■ VAIOらしいって何なのかは別にして\n\n VAIOは2024年7月1日に創立10周年を迎えた。カッコイイ、カシコイ、そしてホンモノであることを追求してきた同社だが、その10年目の節目に、まさにVAIOならではの製品が提示されたのだと納得する。とても心強いし、VAIOらしいと思う。\n\n 単に薄軽強を訴求するだけではなく、製品の付加価値を説得力あるロジックとものづくりで具現化し、積極的に新しい世界観を提案する姿勢。今回のVAIO Vision+では、そのカバースタンドに込められた執念にも近いスピリッツにVAIOの凄みを感じてしまった。\n\n きっとまだまだ大丈夫だ。\nPC Watch,山田 祥平",['https://newsatcl-pctr.c.yimg.jp/t/amd-img/20240706-00000019-imppcw-000-1-view.jpg?pri=l&w=360&h=640&exp=10800'],['https://news.yahoo.co.jp/articles/18ebf10d5921bcf9bb37332253433fe40434ce02/images/000']
奥村茉実の「ハイドライド」、なぜか気付かないうちに強敵も倒したし、2人目の妖精もゲット（PC Watch）,https://news.yahoo.co.jp/articles/71c473fd8392e3f927f26eb588e50bafb83adfe6,https://newsatcl-pctr.c.yimg.jp/t/amd-img/20240706-00000021-imppcw-000-1-view.jpg?exp=10800,2024-07-06T08:01:45+09:00,2024-07-06T08:01:45+09:00,PC Watch,imppcw,PC Watch,3278,"\n写真：PC Watch\nみなさんこんにちは、奥村茉実です。今回も引き続き「ハイドライド」をプレイしました。1984年にT&E SOFTが発売したもので、アクションRPG普及の役割を果たした作品の1つとしても有名なようです。PC-9801用の移植版をプレイしていて、Project EGGにて550円で購入可能です。\n【画像】レトロゲームのプレイにはマウスコンピューターさんの「G-Tune E4-I7G60DB-B」を利用させていただいています。主な仕様は、Core i7-12650H、メモリ16GB、GeForce RTX 4060 Laptop、SSD 500GB、14型フルHD/144Hz液晶を搭載しています\n今回も軽くゲームのストーリーを軽く紹介しておきます。3つの宝石の力で保たれていた王国フェアリーランド。ある人間によって宝石が1つ奪われたせいで、悪魔が覚醒し、王国は崩壊、怪物も発生し、王女も妖精の姿に変えられて連れ去られてしまいました。そこで、ジムという少年が立ち上がる、という流れです。\n\n 前回は主に経験値稼ぎしながらマップ内を探索し、行けるところまで行ってアイテムをいくつか取り、最後に妖精を1人見つけたところで終わっています。\n\n 基本的にこの企画では、アドバイスやネタバレは禁止なのですが、今回のハイドライドに関しては初見だと難易度が高いこともあり、配信中に皆さんからアドバイスをいただいています。さらにスタッフさんから進め方のヒントもいただいているので、それも参考にしつつ頑張っていきます!\n\n まずは前回力尽きて、半端に終わらせていた経験値稼ぎの続きです。今のところ体力は30ですが、ヒントを見ると次の行動を起こすには50は必要なようです。ということで、前回と同じイソギンチャクエリアで地道に稼いでいきます。\n\n 相変わらず削られたHPを止まって回復するのにかなり時間がかかり、「ああああ回復アイテムとかにしてくれ～」と、ついイマドキのゲーム性が恋しくなります(笑)。\n\n 前回はかなり進めていたのに、セーブをしていないまま死んで、また前に戻ってしまうという「私的あるある事件」に何回も遭遇しました。今回は絶対そうはさせないと定期的にセーブをしていましたが、人間ってうまくいっていると調子に乗って忘れるものですね。あと1体倒せば体力が上がる! というところで死んでしまい、ロードをしたらまたかなり前に戻りました(笑)。\n\n めげずにやり直します。イソギンチャクの倒し方は前回と同じで、ダンジョンの入り口付近で背を向けて去っていくイソギンチャクを、後ろから攻撃です。横からの攻撃でもノーダメージで攻撃できることを知ったので、それを交えてみました。そしてなんとか体力が50に! これで次に進めます!\n\n 次にやるべきことは、前回はたどり着けなかったイソギンチャクの先にある宝箱を開けることです。宝箱の前にいる黄色い看守が強すぎて、たどり着いても即死でした。\n\n ヒントを見る限り、体力50あれば大丈夫そうだったので向かったけど、倒せない……!? 何度挑戦しても死んでしまいます。なんかバージョンが違って、ヒントと少しズレが生じているのか……? 実はもっと体力を上げないといけないのか……?\n\n いったんここは諦めて再度レベル上げすることに(泣)。ただ、イソギンチャクではもう経験値は増えなかったので、前回軽く立ち向かっていたゾンビエリアにまた向かうことに。しかし、このゾンビでもなかなかスムーズには経験値が増えません。\n\n ちなみに、このゾンビのエリアで宝箱を発見しました。前からあったのかは謎ですが、開けようとしても開きません。今までの宝箱は簡単に開いていたので、ここは鍵か何かが必要なのかもしれない……。\n\n 途方に暮れかけていた時、倒し方が問題なだけで、実はイソギンチャクエリアの看守は、もう少し頑張れば倒せるのでは……? という流れに。なので再びイソギンチャクエリアに戻りました。\n\n まずは看守の元に行くまでにイソギンチャクを倒す必要があります。どうも攻撃がかみ合わずに辿り着く前にHPが削られることがしばしば。\n\n ただ、ここで初めて気づいたことが、草原でなくてもダンジョンの中でも立ち止まっていればHPが回復できるということです。ただ、倍くらいの時間がかかります。さらに、回復している間にイソギンチャクが来てしまうと、全然回復が進みません。\n\n ので、イソギンチャクがいつも出てくるところに陣取って出てこられないようにして、その間にゆっくり回復です。いい感じにセーブも混ぜつつ、何度も看守に挑戦。後ろからの攻撃も効かず、横もダメ。ただ、実は別のエリアでは同じ黄色い看守を倒せていたので、恐らくどうにかすると倒せるはずなのです……。\n\n 一気に攻撃するよりは、1回攻撃して少し戻り、また攻撃の方がいいのかとも思い試してみます。そして、何度か挑戦していると、いつの間にか看守がいなくなっていたのです! 自分では全く気づいていませんでしたが、どこかの攻撃のタイミングで倒せていたみたいです! 私はいつも肝心なところを見逃している……(笑)。\n\n そして宝箱を開けると、アラジンのランプのような、カレーを入れるおしゃれなやつのようなものをゲットしました。これは何に使えるのかまだ分かりませんが、アイテムは着々と増えていきます。さらに、イソギンチャクエリアにどこかにつながる穴が出現しました。\n\n 早速入ると、黄色い看守だらけ(笑)。まだこの人いるのか……。そして安定の迷路。たくさんの宝箱もあります。隣の画面にも宝箱がたくさん。1つ1つ開けていきますが、どうやら本物は1つのようで他は全部ダミーでした。看守を避けながら迷路を進み、本物の宝箱を見つけることがまぁ大変。\n\n とは言いつつ、何度かやっていると、看守から逃げる方法も身に付いてきました。迷路の途中であえて引き寄せて、逆の道に進むと看守に会わずに先へ進めます。そしてやっと本物の宝箱に到着。中身は鍵でした。これでゾンビエリアの宝箱を開けられるかも!\n\n そしてゾンビエリアの宝箱を開けてみると、謎の丸い何かをゲットしました。\n\n 何に使うのか分からないまま、大量に宝箱があったエリアに無視していた穴があったので、そこに向かいます。もうその穴まで行くのはおちゃのこさいさい。黄色い看守なんて怖くないです(笑)。\n\n 穴に入ると違うエリアに出ました。前から自分が行ける外に他の陸があることがすごく気になっていたので、スッキリ! そしてヒントを見ると、ここには動く木がいくつかあるエリアがあり、その木のどれかに妖精が隠れているとのこと。\n\n 1人目の妖精を見つけた時と似ている展開。とりあえず、動く木がたくさんあるエリアを探していると……、ありました! 動いている赤い物体! が、すみません……。私はこれが動く木なのかと思いましたが、ただのサソリでした(笑)。ちなみにこのサソリを倒すには、まだ体力が足りないよう。\n\n 引き続き動く木を探すと、今度は本当にありました(笑)。前回はここから妖精を見つけるのにかなり時間がかかっています。今回も動いている木はたくさんあるので、時間がかかるだろうなと思っていたら、まさかの2本目の木で妖精発見!\n\n なお、ここでも私は妖精を見つけたことにすぐには気づいていませんでした……。ふと画面右下を見たら妖精が2人いてハッとしました(笑)。\n\n ということで、今回はここまで! 終わりは全く見えませんが、また妖精を1人見つけられたので、前進しているのではないでしょうか? HPや経験値が増えてくると、心の余裕が出てきて、その分楽しさも倍増。また次回も配信、記事のチェックをお願いします(^^♪\nPC Watch,奥村 茉実",['https://newsatcl-pctr.c.yimg.jp/t/amd-img/20240706-00000021-imppcw-000-1-view.jpg?exp=10800'],"['https://news.yahoo.co.jp/articles/71c473fd8392e3f927f26eb588e50bafb83adfe6/images/000', 'https://pc.watch.impress.co.jp/img/pcw/docs/1605/977/html/mouse_o.jpg.html']"
【第55回】UbuntuとWireGuardで自宅にVPNを導入しよう！（PC Watch）,https://news.yahoo.co.jp/articles/ca2621a62459f193a44978263efcad0ae74180d9,https://newsatcl-pctr.c.yimg.jp/t/amd-img/20240706-00000018-imppcw-000-1-view.jpg?exp=10800,2024-07-06T06:15:20+09:00,2024-07-06T06:15:20+09:00,PC Watch,imppcw,PC Watch,11861,"\n写真：PC Watch\nここ数年は働き方改革やコロナ禍の影響もあり、業務上でVPNを使用する機会が増えた人も多いのではないだろうか。そんな背景もあり、VPNといえばリモートワークのお供というイメージがあるかもしれない。だが業務だけでなく、自宅サーバー勢にとってもVPNの導入はメリットがある。\n【画像】WireGuardのセットアップの流れ\nたとえば自宅内で運用しているサーバーに、外出先からもアクセスしたいというケースはよくあるだろう。この場合、サービスごとにルーターのポートを解放して、サーバーに転送するのが一般的だ。だがこの方法にはいくつか問題がある。\n\n まずそもそも論として、インターネット越しに利用することを想定していないサービスや、公開できないサービスには使えない[link|c1|^1|@@]。仮にインターネット越しに利用できるサービスであったとしても、外部からのアクセスを受け付ける以上、不正アクセス対策には十分に気をつける必要が出てくる。またこの方法では、同じポートを複数のサービスで使うことができない。つまり用途が異なるWebサーバーを2台動かしたい場合、80番や443番ポートの奪い合いになってしまうのだ。\n\n だがVPNを使えば、インターネットを経由して端末をLANに接続できる。つまり自宅外にいながら、あたかも自宅内にいるかのようにサービスを利用できるというわけだ。こう聞くと、とても便利そうな気がしてきたのではないだろうか。\n\n 今回はUbuntuと「WireGuard」というソフトウェアを使い、自宅内にVPNサーバーを構築する方法を紹介しよう。\n\n■ VPNとは\n\n まずVPN(Virtual Private Network)について簡単に説明しておこう。Virtual Private Networkとは「仮想の専用線」を意味する言葉だ。そしてわざわざ「仮想の」と言うからには、当然「仮想ではない」専用線というものが存在する。\n\n 専用線とは、インターネットのような公衆のネットワークを介さずに拠点同士を直接接続する、専用の回線のことだ。たとえば東京のオフィスと大阪のオフィスを、専用回線で直結することをイメージしてみてほしい。専用線のメリットは、文字通り回線を占有できるため、インターネットよりも高いセキュリティや、高品質な通信が期待できる点だ。だが簡単に予想できると思うが、専用の設備が必要となるため、非常に大きなコストがかかる。また当然だが、モバイル端末などからは利用できない。\n\n そこで登場するのが「仮想の」専用線であるVPNだ。VPNはインターネット上に、プライベートなネットワークを仮想的に構築する技術の総称だ。この仮想的なネットワークは、通信を行なう両者で占有され、その通信は暗号化される。これによってインターネットを使用しているにもかかわらず、第三者による盗聴などを防ぎ、セキュアな通信を実現できるというわけだ。VPNはインターネットを利用するため、別途回線を敷設する必要がない。\n\n また機材面においては、VPNに対応した機材(ルーターなど)を接続先に設置するだけでよいため、非常に低コストで導入できる。\n\n VPNに接続された端末同士は、あたかも同じネットワークに接続しているように振る舞う。つまり自宅のPCやモバイル端末を、オフィスのLANに接続しているかのように扱えるわけだ。\n\n クラウドサービスのメリットは利用する場所を選ばないことなのだが、実際の業務においては、残念ながらまだまだ「オフィスにいないと仕事ができない」というケースが多い。たとえば業務に必要なデータが社内のファイルサーバーにしかなかったり、客先のシステムにアクセスするためには、オフィスの固定IPアドレスが必要だったりといった具合だ。そこで、自宅内のPCをオフィスに接続してリモートワークを行なうといった目的で、VPNは広く利用されている。\n\n 実際に総務省による「テレワークセキュリティガイドライン」においても、VPNは「オフィス内と同等のセキュリティレベルを確保し、オフィス内にいるのと同等の業務が可能な方式」と紹介されている。\n\n■ WireGuardとは\n\n VPNを構築するためには当然だが、端末が接続するためのVPNサーバーが必要となる。これには市販のVPN対応ルーターなどを使うのが一般的だが、これをUbuntuサーバーと、VPNソフトウェアである「WireGuard」を使って実現しようというのが今回のテーマだ。\n\n 今回紹介するWireGuardは、複数存在するVPN実装の1つだ。もちろんオープンソースであり、現在ではLinuxカーネルにマージされていて、Linuxのカーネルモジュールとして動作する。そのためLinuxベースのシステムであれば、非常に導入しやすいVPNだと言えるだろう。\n\n こう聞くとLinux専用のように思われてしまうかもしれないが、Windows/macOS/iOS/Android向けのクライアントも用意されており、利用するだけならば環境を選ばないため安心してほしい。\n\n WireGuardは、従来煩雑になりがちだったVPNをより簡単に、具体的にはSSHサーバーと同程度の手間でセットアップできることを目標としている。詳しい手順は後述するが、実際にサーバーとクライアントで公開鍵を交換し、サーバー管理者がIPアドレスを払い出すだけでセットアップできる。そしてこれだけシンプルなシステムでありながらも非常に高速であり、OpenVPNやIPsecよりも高いパフォーマンスを謳っている。\n\n ここからはWireGuardサーバーとクライアントをそれぞれ設定し、VPNコネクションを張るまでをステップバイステップで解説する。WireGuardはサーバーとクライアント双方で鍵ペアを作成し、それを交換して設定ファイルに記述するという都合上、サーバーでの作業とクライアントでの作業が並行して発生する。そのため手順が少し分かりにくいかもしれないが、手順や設定ファイルの内容を取り違えないよう気をつけて作業しよう。コマンドの実行例の前には、どちらで実行するのかが分かりやすいよう、「(server)」「(client)」の記述を追加しているため、これも参考にしてほしい。\n\n おおまかな手順を図にまとめてみた。最初にざっくりと作業の流れを把握しておくといいだろう。\n\n■ WireGuardサーバーのインストールと鍵ペアの生成\n\n まずはサーバーのインストールだ。今回WireGuardサーバーにはUbuntu 24.04 LTSのサーバー版を利用した。言うまでもないがサーバーは、IPアドレスを固定化しておこう。netplanによるIPアドレスの固定化は、【第29回】で解説している。なお筆者の例では、WireGuardサーバーのIPアドレスは「192.168.1.20」としたので、自分の環境に合わせて適宜読み替えてほしい。\n\n WireGuardは以下のコマンドでインストールできる。\n\n(server)$ sudo apt install -y wireguard\n\n また詳しくは後述するが、以下のコマンドを実行してカーネルのパラメータを変更しておこう。これはパケットの転送を明示的に許可する設定だ。\n\n(server)$ sudo sed -i.bak -e 's/\n#\n\(net.ipv4.ip_forward=1\)/\1/' /etc/sysctl.conf\n(server)$ sudo sysctl -p\n\n 続いて、サーバーが利用する鍵ペアを生成しよう。まず「wg genkey」コマンドを使って、秘密鍵を生成する。生成された秘密鍵は、後述する設定ファイルに記述すればいいため、ここで別のファイルとして保存しておく必要はない。\n\n だが万一内容を失念してしまった場合、鍵の再生成とクライアントへの公開鍵の再配布という作業が発生してしまい、面倒になる。そこで「/etc/wireguard/server.key」というファイルに保存しておくことにした。\n\n 続いて秘密鍵から公開鍵を生成する。これには秘密鍵ファイルの内容を「wg pubkey」コマンドにパイプしてあげればいい。すると公開鍵が出力されるので、これを「/etc/wireguard/server.pub」として保存することにした。最後に秘密鍵ファイルと公開鍵ファイルの両方のパーミッションを600とし、第三者に盗み見られないようにしておこう。\n\n(server)$ wg genkey | sudo tee /etc/wireguard/server.key\n(server)$ sudo cat /etc/wireguard/server.key | wg pubkey | sudo tee /etc/wireguard/server.pub\n(server)$ sudo chmod 600 /etc/wireguard/server.{key,pub}\n\n■ WireGuardクライアントのインストールと鍵ペアの生成\n\n 今度はクライアント側のインストールだ。クライアントにはUbuntu 24.04 LTSのデスクトップ版を利用した。クライアントもサーバーと同じく、wireguardパッケージをインストールすればいい。もちろんクライアント側では、IPアドレスの固定やパケット転送の許可は不要だ。\n\n(client)$ sudo apt install -y wireguard\n\n クライアント側でも秘密鍵と公開鍵を生成する。ファイル名を変えた以外は、サーバー側の手順と同一だ。\n\n(client)$ wg genkey | sudo tee /etc/wireguard/client.key\n(client)$ sudo cat /etc/wireguard/client.key | wg pubkey | sudo tee /etc/wireguard/client.pub\n(client)$ sudo chmod 600 /etc/wireguard/client.{key,pub}\n\n WireGuardでは、サーバーの設定ファイルにはクライアントの公開鍵を、クライアントの設定ファイルにはサーバーの公開鍵を記述する必要がある。なのでサーバーとクライアントの双方で鍵ペアの生成が完了したら、お互いに公開鍵を交換しておこう。企業などでは、情シスの担当者とやりとりする必要があるだろう。個人で設定している場合は、何らかの方法で、それぞれのマシンに公開鍵をコピーしておこう。\n\n■ WireGuardサーバーの設定\n\n 準備ができたので、サーバーに具体的な設定を行なおう。WireGuardの設定ファイルは、「⁠/etc/wireguard」ディレクトリ内に、「作成するインターフェイス名.conf」という名前で作成するのが一般的だ。今回はインターフェイス名を「wg0」とした。\n\n また同時に、WireGuardのネットワークに割り当てるIPアドレスのレンジ、サーバーのインターフェイスと、クライアントに割り当てるIPアドレス、サーバーが待ち受けるポート番号を決めておこう。筆者はネットワークに「10.0.0.0/24」を割り当てた。そしてサーバーのインターフェイスには「10.0.0.1⁠」⁠、クライアントのインターフェイスには「10.0.0.2」のIPアドレスを割り当てることにした。そして待ち受けるポート番号は「51000」だ。\n\n 必要な情報が集まったので、「/etc/wireguard/wg0.conf」というファイルを、以下の内容で作成しよう。\n\n[Interface]\nPrivateKey = 2LZDhfbmeNj5B0XXXXXXXXXXXXXXXXXXXXX=← ここに「サーバー」の「秘密鍵」をコピペする\nAddress = 10.0.0.1← サーバーのインターフェイスに割り当てるIPアドレス\nListenPort = 51000← サーバーが待ち受けるポート番号\nPostUp = iptables -A FORWARD -i wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o enp1s0 -j MASQUERADE\nPostDown = iptables -D FORWARD -i wg0 -j ACCEPT; iptables -t nat -D POSTROUTING -o enp1s0 -j MASQUERADE\n\n[Peer]\nPublicKey = twXWXixw5FAUIHdXXXXXXXXXXXXXXXXXXXXX=← ここに「クライアント」の「公開鍵」をコピペする\nAllowedIPs = 10.0.0.2/32← このクライアントに割り当てるIPアドレス\n\n PostUpとPostDownは、WireGuardが起動する前後に実行するコマンドの指定だ。実はデフォルトでは、WireGuardサーバーに接続してきた端末は、WireGuardのネットワーク(ここでは10.0.0.0/24の空間)でしか通信ができない。だたVPNの主目的は、組織内部のLANに接続したり、そこからインターネットへ出ていくことだろう。なのでWireGuardネットワークから外に出られないのでは意味がない。そこでWireGuardの起動時にiptablesコマンドを実行し[^2]、IPマスカレードを行なう設定を追加しているのだ(PostDownは終了時の後片付けだ)。先ほどカーネルパラメータを変更し、パケットの転送を許可したのは、この設定を行なうためだったというわけだ。\n\n iptablesコマンドは少々複雑だが、「FORWARD -i wg0」の部分にWireGuardのインターフェイスを、「POSTROUTING -o enp1s0」の部分に転送先のNICの名前を指定すればいい。NICの具体的な名前は、networkctlコマンドなどで確認しておこう。\n\n(server)$ networkctl\nIDX LINKTYPEOPERATIONAL SETUP\n1 loloopback carrierunmanaged\n2 enp1s0 etherroutableconfigured\n\n2 links listed.\n\n なおVPNサーバーをLAN内で動かす場合は、ルーターに静的ルーティングの設定が必要になる。だがそこの解説は本記事の領分を越えてしまう上、ルーターの機種ごとに異なるため、割愛させていただく。基本的には家庭内のWebサーバーをインターネットに公開する時などと同様に、WireGuardのUDPポート(ここでは51000番)をルーターで解放し、サーバーの固定IP(本記事の例では192.168.1.20)に向けてルーティングを設定すればいい。\n\n■ WireGuardクライアントの設定\n\n 続いてクライアント側の設定を行なおう。サーバーと同じく「/etc/wireguard/wg0.conf」というファイルを、以下の内容で作成しよう。基本的にはサーバーの設定と「Interface」と「Peer」が逆になっていると思ってもらえればいい。\n\n[Interface]\nPrivateKey = +BV7K1NCTY9KXXXXXXXXXXXXXXXXXXXXXXXXXXXX ← ここに「クライアント」の「秘密鍵」をコピペする\nAddress = 10.0.0.2← サーバーから割り当てられたクライアントのIPアドレス\n\n[Peer]\nPublicKey = y0sZcvHx3YwckXXXXXXXXXXXXXXXXXXXXXXXXXXXX ← ここに「サーバー」の「公開鍵」をコピペする\nEndPoint = 203.0.113.XXX:51000← VPNのエンドポイントとなるサーバーのIPアドレスとポート番号\nAllowedIPs = 10.0.0.0/24, 192.168.1.0/24← WireGuardを経由して通信する先のIPアドレス\n\n 公開鍵と秘密鍵、ポート番号やIPアドレスについては、説明するまでもないだろう。ただしクライアントとサーバー、公開鍵と秘密鍵は取り違えやすいため、気をつけて設定してほしい。クライアントのInterfaceに設定するIPアドレスは、サーバーのPeerのAllowedIPsに指定したものと揃える必要がある。\n\n ここで新しく登場する設定項目が「EndPoint」だ。これは文字通り、VPNのエンドポイント(クライアントが接続する先)を指定する。具体的にはインターネットからサーバーに到達可能なIPアドレスとポート番号だ。家庭内にあるサーバーであれば、大抵の場合はプロバイダからルーターに割り当てられたIPアドレスになるだろう。\n\n 「AllowedIPs」は、クライアントがWireGuardを経由して通信する先のIPアドレスだ。ここではWireGuardネットワークである「10.0.0.0/24」と、筆者の家庭内LANである「192.168.1.0/24」を指定している。クライアントは、このアドレス宛ての通信が発生すると、WireGuardインターフェイスを通じてVPNにトラフィックを流そうとする。なのでここに「0.0.0.0/0(すべてのIP)」を指定すると、文字通りすべての通信がVPN経由で行なわれるようになる。\n\n 冒頭で述べたように、客先のシステムにアクセスするためには、オフィスの固定IPアドレスが必要だというケースはよくあるだろう。そういう時はこの設定を行なえば、インターネットに出ていくあらゆる通信において、VPN先のネットワークを経由することができる。\n\n■ WireGuardサーバーの起動\n\n サーバー、クライアント双方の設定が完了したら、サーバーを起動しよう。以下のコマンドを実行して、WireGuardのサービスを有効化する。\n\n(server)$ sudo systemctl enable --now wg-quick@wg0\n\n WireGuardはwg-quickというラッパースクリプトを経由して起動するのだが、よく見るとsystemdのユニット名に「@」が含まれているのが分かるだろう。これはsystemdのユニットファイルに、引数を与えるための書き方だ。WireGuardでは引数としてインターフェイス名を渡しており、これによって同じユニットファイルを、複数のインターフェイスで使い回すことができるというわけだ。\n\n 起動が完了したら、networkctlコマンドでwg0インターフェイスの状態を確認してみよう。以下のようにStateがroutableになっており、設定ファイルに記述したIPアドレスが割り当てられていればOKだ。\n\n(server)$ networkctl status wg0\n\n■ 3: wg0\nLink File: /usr/lib/systemd/network/99-default.linkNetwork File: n/aState: routable (unmanaged)Online state: unknownType: wireguardKind: wireguardDriver: wireguardMTU: 1420 (max: 2147483552)QDisc: noqueue IPv6 Address Generation Mode: noneNumber of Queues (Tx/Rx): 1/1Address: 10.0.0.1Jul 02 11:20:36 noble systemd-networkd[446]: wg0: Link UP Jul 02 11:20:36 noble systemd-networkd[446]: wg0: Gained carrier\n\n■ VPNへの接続\n\n ここまででWireGuardのセットアップは完了だ。それではクライアントからサーバーに対し、VPNコネクションを張ってみよう。今回は、筆者の自宅LAN内に構築したWireGuardサーバーに対し、ルーターでUDPの51000番ポートを解放し、スマホのテザリングを経由して、ノートPCから接続してテストを行なった。\n\n クライアント上で、root権限で「wg-quick up」コマンドを実行しよう。引数としてWireGuardのインターフェイス名(今回はwg0)を指定する。設定に間違いがなければ、これだけで接続は完了する。\n\n(client)$ sudo wg-quick up wg0\n[\n#\n] ip link add wg0 type wireguard\n[\n#\n] wg setconf wg0 /dev/fd/63\n[\n#\n] ip -4 address add 10.0.0.2 dev wg0\n[\n#\n] ip link set mtu 1420 up dev wg0\n[\n#\n] ip -4 route add 192.168.1.0/24 dev wg0\n[\n#\n] ip -4 route add 10.0.0.0/24 dev wg0\n\n ipコマンドで経路を調べてみよう。見ての通り、10.0.0.0/24(WireGuardネットワーク)と192.168.1.0/24(LAN)向けのパケットは、wg0インターフェイスを経由するようルートが設定されていることが分かる。\n\n(client)$ ip r\ndefault via 192.168.222.248 dev wlp3s0 proto dhcp src 192.168.222.108 metric 600\n10.0.0.0/24 dev wg0 scope link← wg0を経由するWireGuardネットワーク向けのルートが追加されている\n192.168.1.0/24 dev wg0 scope link← wg0を経由してLANにアクセスするためのルートが追加されている\n192.168.222.0/24 dev wlp3s0 proto kernel scope link src 192.168.222.108 metric 600\n\n この状態で、LAN内のコンピューターに対してpingを打ってみよう。またファイルサーバーやWebアプリが動いているのであれば、実際にアクセスしてみてもいいだろう。\n\n(client)$ ping 192.168.1.5\nPING 192.168.1.5 (192.168.1.5) 56(84) bytes of data.\n64 bytes from 192.168.1.5: icmp_seq=1 ttl=63 time=704 ms\n64 bytes from 192.168.1.5: icmp_seq=2 ttl=63 time=337 ms\n64 bytes from 192.168.1.5: icmp_seq=3 ttl=63 time=352 ms\n(...略...)\n\n サーバーで「wg」コマンドを実行すると、現在のコネクションの様子が表示される。コネクションが確立し、実際にデータの転送が行なわれていることが分かる。\n\n(server)$ sudo wg\ninterface: wg0\npublic key: y0sZcvHx3YwcXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nprivate key: (hidden)\nlistening port: 51000\n\npeer: twXWXixw5FAUIHdEzNXXXXXXXXXXXXXXXXXXXXXXXXXX\nendpoint: 133.159.XXX.XXX:47820\nallowed ips: 10.0.0.2/32\nlatest handshake: 1 minute, 37 seconds ago\ntransfer: 1.31 MiB received, 26.92 MiB sent\n\n コネクションを切断するには、クライアントで「wg-quick down」コマンドを実行しよう。もちろんupの時と同様に、引数にはインターフェイス名を指定する。業務で利用しているようなVPNコネクションは、つなぎっぱなしにしておくのは好ましくない[^3]。特にすべてのインターネットアクセスをVPN経由にしている場合はなおさらだ。使い終わったらすみやかに切断しておこう。\n\n(client)$ sudo wg-quick down wg0\n\n■ GUIからWireGuardを使う\n\n デスクトップ環境からVPNにつなぐのであれば、いちいちターミナルからコマンドを実行するのは面倒くさいだろう。実はUbuntu 24.04 LTSでは、GUIから簡単にWireGuardに接続できるようになっているので、こちらの機能を利用するのがおすすめだ。\n\n まずUbuntuの設定から「ネットワーク」を開き、新しいVPN設定を作成しよう。\n\n すると「VPNを追加」というダイアログが表示される。ここで「WireGuard」を選択し、ダイアログに必要な情報を入力していってもよいのだが、今回は既に設定ファイルを作成済みのため、「/etc/wireguard/wg0.conf」をそのまま流用しよう。ただし一般ユーザーでは「/etc/wireguard」ディレクトリの中身を読むことができない。そこでいったんホームディレクトリに、このファイルをコピーしておこう。\n\n(client)$ sudo cp /etc/wireguard/wg0.conf ~/\n\n 「ファイルからインポート」を選択し、ホームディレクトリにコピーしたwg0.confを読み込めば、それだけで設定は完了だ。\n\n VPNを追加すると、デスクトップ右上のシステムメニューに「VPN」の項目が新しく追加される。あとはWi-FiやBluetoothのオン/オフと同様に、このボタンをクリックするだけで、VPNコネクションの生成や切断が可能になるというわけだ。\n\n このように、WireGuardは簡単に使い始めることができる。また冒頭で述べたように、Windows/macOS/iOS/Androidでも利用可能だ。そしてVPNサーバー自体は大したマシンスペックを必要としないため、それこそRaspberry PiのようなSBCでも問題なく運用できる。自宅内でさまざまなサーバーを動かしている人や、そろそろVPNを導入しないとなーと考えている企業の情シスの人などは、ぜひ本記事を参考に、WireGuardを試してみてほしい。\n\n[^1]: たとえばバージョン3.0以前のSMB(Windowsファイル共有)などだ。以前のSMBはインターネットで利用することを前提に設計されていなかったため、SMB 3.0に対応していない古いNASなどをインターネットから利用したいと思ったら、VPNなどを併用し、セキュアな通信経路を確保する必要がある。\n\n[^2]: 現在のUbuntuにおけるパケットフィルタリングは、内部的にはiptalbesの後継であるnftablesが担っている。とはいえ昔ながらのiptablesコマンドも依然として利用できるため、馴染みの深いiptablesコマンドを使う例を紹介した。ここはもちろんnftables(nftコマンド)の記法に置き換えても問題ない。\n\n[^3]: 筆者が以前の職場で社内インフラ担当をしていた時には、「すみません、自宅からVPNを繋いだまま紳士向けのサイトを見てしまいました……」といった報告(あるいは懺悔)を受けたことが何度かある。みんなも気をつけよう。\nPC Watch,Ubuntu Japanese Team/日本仮想化技術株式会社 水野源",['https://newsatcl-pctr.c.yimg.jp/t/amd-img/20240706-00000018-imppcw-000-1-view.jpg?exp=10800'],"['https://news.yahoo.co.jp/articles/ca2621a62459f193a44978263efcad0ae74180d9/images/000', 'https://pc.watch.impress.co.jp/img/pcw/docs/1606/110/html/gg_o.jpg.html', 'https://news.yahoo.co.jp/search?p=%23&source=article-body']"
