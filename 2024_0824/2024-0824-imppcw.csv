headline,mainEntityOfPage,image,datePublished,dateModified,author,media_en,media_jp,str_count,body,images,external_links
待てばスマホの日和あり～手に入れてから高みを目指すPixel 9（PC Watch）,https://news.yahoo.co.jp/articles/5b20a2a611848a73f4dc1dbee4d6ba302c689c66,https://newsatcl-pctr.c.yimg.jp/t/amd-img/20240824-00000019-imppcw-000-1-view.jpg?exp=10800,2024-08-24T06:42:00+09:00,2024-08-24T06:42:00+09:00,PC Watch,imppcw,PC Watch,3157,"\n写真：PC Watch\n例年通り、Googleのスマホが刷新され、Pixel 9シリーズの販売が始まった。今年はサイズやフォームファクタ、カメラ装備が異なる4種類のPixelが登場する。発売や発表も例年よりも約2カ月早い。新iPhoneに先駆けての発売を狙ったものという見方もできそうだ。\n\n■ 小さなProと大きなXL\n\n 今年のPixelシリーズは、無印のPixel 9、基本形で上位のPixel 9 Pro、大画面のPixel 9 Pro XL、折りたたみのGoogle Pixel 9 Pro Foldという4種類のモデルで構成される。無印とProはカメラ装備の仕様をはじめ、メモリ容量を含む基本仕様が違う。無印とProの画面サイズは6.3型で、Pro XLが以前のProと同じ6.8型、折りたたみタイプのFoldは外側画面が6.3型、内側が8型となっている。無印とPro XLはすでに販売中、ProとPro Foldは少し先の9月4日に発売だ。\n\n Pixel 8シリーズでは無印とProだけだったが、従来のProはPro XLとなり、無印と画面サイズが同じProが追加された。\n\n おそらく日本では6.8型でのスマホは大きすぎると感じるユーザーが多かったのかもしれない。Googleはそれを重要視したのだろう。Pro XLは画面の大きさと引き換えに、重量も221gと軽くない。画面サイズ以外はPro XLとほぼ同じ仕様でわずかでも200gを切るProが用意されたのを歓迎する層も多そうだ。\n\n まとめると、スレートタイプのPixelは、\n\n・比較的安くでベーシックな基本性能が手に入る無印(Pixel 9) : 128,900円～\n・無印と同じ手ごろなサイズ感で最高峰の性能を持つPro(Pixel 9 Pro) : 159,900円～\n・より大きな画面が欲しい場合のPro XL(Pixel 9 Pro XL) : 177,900円～\n\nの3種類からの選択となる(価格はGoogleストアのもの)。無印、Pro、Pro Maxで構成されるiPhone 15シリーズに似た構成であるともいえる。\n\n その一方で、Pixel 9が198g、Pixel 9 Proが199gと、先代のPixel 8のように6.2型で187gというコンパクトな軽量さからは、いったん退いた。そこが残念という層も少なからずいるように思う。最新を含む歴代Google Pixel のハードウェア仕様についてはここに詳しい。ちなみにiPhone 15シリーズは無印が171g、Proが187g、Pro Maxが221gだ。\n\n■ アクセサリメーカーもやる気満々\n\n Pixelの売れ方は日本が支えているという話もあちこちから聞こえてくる。あまりにタイミングがあいすぎで、一体どういう方法で実現しているのかよく分からないのだが、アクセサリメーカーもいち早く対応ケースなどを発売する。たとえばトリニティは、Pixel 9シリーズ発売前の2024年8月14日(水)に予約販売を開始し、端末発売日前日までに届けると発表した。\n\n Pixel 9シリーズ以降、指紋認証方式は、光学式認証よりも精度の高い超音波式に変わったが、新シリーズ用の画面保護ガラスやフィルムは超音波式への対応をアピールする。さらに、図面を示しながら、形状がほぼ同じに見えるPixel 8 ProとPixel 9 Pro XLの違いなどを解説するという同社のマニアックなブログは斬新だ。\n\n 興味深いのは、Pixel 9とPixel 9 Proが同サイズであることから、ノート型ケース、そして、5種類ものタイプの異なるクリアケースを用意しているところだ。その一方で、Pro XLについては対応ケースが1種類のみとちょっと寂しい。同社の読みでは、日本で売れるのは無印かProのどちらかで、Pro XLはさほどでもないということなのか。\n\n 8シリーズまではカメラ仕様を含むハードウェアが無印とProで大きく違っていて棲み分けができていたが、今年のPro XLはちょっとはみ出しというイメージなのかもしれない。\n\n ちなみに、同社のクリアケースは一部をのぞいてストラップホールが左右2箇所にあり、2点支持の両吊りストラップに対応できるのがうれしい。\n\n■ AIならAndroid\n\n ご存じのように、GoogleはPixel 9シリーズの発表にあたり、そのAI機能の数々を大々的にアピールした。発表会イベントはAIの解説に時間の多くを費やし、新発売される端末についてはずっと後回しにしているような印象もあった。よりによって新しいPixel 9シリーズよりも、SamsungのAIスマホGalaxy S24 Ultraの方が目立っていたくらいだ。見方を変えれば、AIはAndroid OSの強みであると言いたいのかもしれない。\n\n 発表済みのGemini関連の豊富なAI機能については8月中旬に英語でサービスインしたが、日本語対応は先送りにされている。また、AIとは無関係かもしれないが、サテライトを使ったSOSなどの通信機能についても同様だ。\n\n 発表会のデモで披露された電話での会話を要約してメモにしてくれるCall Notes機能などは素晴らしいと思うが、それも発売時点では未実装となっている。音声対話で気軽に使えるAIとしてのGemini Liveもまだ先だ。音声アシスタントの新たな当たり前を提供するであろう鳴り物入りの機能だけに、少しでも早く体験したいものだ。\n\n その一方で、カメラにまつわるAI機能の数々は、すぐに使える。集合写真にあとから参加できる一緒に写る機能(Add Me)などは、機能そのもののすごさというより、画像生成AIが暮らしに与える効果を実感できる好例になっている。ものすごい説得力で、これを考えたプランナー/デザイナーはすごいと思う。\n\n■ 入手後に進化するAIスマホ\n\n いろんな意味で、今年のPixelは期待を買うシリーズだと言えそうだ。約束された機能の多くがすべて揃うのはおそらく数週間後、ものによっては数カ月スパンでの時間が必要だろう。つまり、今年のPixelは待ち時間が長い。買ったあとで、ジグソーパズルで言えばいくつかの重要なピースが揃い、洗練された高みに向かう。\n\n もともとPixelシリーズには、Feature Dropと呼ばれる仕組みがあって、ハードウェアが対応できる限り、旧機種を含めて新しい機能が追加されていく。AI機能についての後日追加はあからさまで、最終的には別の新製品に近いスマホに成長することになる。発売後1年近く経ってもFeature Dropで0.5世代くらい新しくなるのは嬉しい。\n\n だからこそ、同じプロセッサであるGoogle Tensor G4を搭載していても、無印が12GB、Proが16GBというメモリ容量の違いは、あとからボディブローにように効いてくるかもしれない。いろんな意味で今回の本命は「Pro」だろう。\n\n 生成AIサービスが急速に浸透していくなかで、言語モデルについては、各国語への対応はそれほど大きな問題ではないように感じていたのだが、ここにきて、少し日本語環境が不利になってきているような懸念も感じる。少しでも早期にこうしたギャップが解消され、どんな言語でも同じように、暮らしを豊かにする各種のAIサービスを使えるようになってほしいものだ。\nPC Watch,山田 祥平",['https://newsatcl-pctr.c.yimg.jp/t/amd-img/20240824-00000019-imppcw-000-1-view.jpg?exp=10800'],['https://news.yahoo.co.jp/articles/5b20a2a611848a73f4dc1dbee4d6ba302c689c66/images/000']
【第58回】ビッグウェーブに乗るために、Ryzen AIのドライバをビルドしてみた（PC Watch）,https://news.yahoo.co.jp/articles/fd48684157517e2e0f0291ec276c8ec4142da5db,https://newsatcl-pctr.c.yimg.jp/t/amd-img/20240824-00000018-imppcw-000-1-view.jpg?exp=10800,2024-08-24T06:21:00+09:00,2024-08-24T06:21:00+09:00,PC Watch,imppcw,PC Watch,6036,"\n写真：PC Watch\n今は猫も杓子もAIAIと、まさに世はAI時代といったところだが、我らがAMDもご多分に漏れずRyzen AIなるブランドを用意している。\n【画像】昔ながらのカーネルのバージョン確認方法で、最新カーネルのバージョンを知る\nもちろんただのマーケティング用語で、汎用的にはNPU(Neural Processing Unit)、AMDとしてはXDNAと呼んでいる。よって本稿でもXDNAと称する。元はXilinxの技術だ。\n\n 実はこれ、UbuntuというかLinuxでも動作する。ソースコードが公開されているのだ。しかしパッケージなどは用意されておらず、自前でビルドする必要がある。\n\n というわけで、今回はビッグウェーブに乗るためにXDNAドライバをビルドしていく。\n\n■ 使用するハードウェア\n\n 今回使用するハードウェアは、第57回で使用した「Minisforum UM780XTX」だ。CPUはRyzen 7 7840HSで、AMDとしてはモバイルワークステーション向けとのことだ。第46回で紹介したRyzen 7 8700Gでも対応している。同じコアを使用しているので当然ではあるが。\n\n XDNA(Ryzen AI)に対応しているCPUかどうかは、前出のRyzen AI紹介ページを見るのが分かりやすい。\n\n■ 使用するUbuntuのバージョン\n\n 使用するUbuntuのバージョンは24.04 LTSとする。XDNAドライバを動作させるにはカーネルのバージョンが6.10以降である必要がある。よって事前にカーネルのバージョンを上げておく。\n\n Ubuntuはメインラインカーネルのパッケージを用意しているのでこれを利用する。メインラインカーネルというのは、Ubuntu向けにカスタマイズされたカーネルではなく、リリースされたままのカーネルくらいの意味だ。最新のバージョンが使用できるというメリットがある一方、普段利用しているカーネルではできるのに、メインラインカーネルではできないことがいくつかある。例としてはセキュアブートに非対応であることや、別途カーネルモジュールをビルドする必要があるドライバは使用できなくなるものもある。\n\n よって普段使用しているPCではなく、実験用のPCがあることが望ましい。この時点で本稿を読むのをやめようかと考えてしまうかもしれないが、そこはちょっと待ってほしい。\n\n 執筆段階では6.10.6がリリースされているので、これを利用する。\n\n インストール方法は簡単で、ここにamd64なにがしと書かれている4つのパッケージをダウンロードし、インストールするだけだ。再起動すれば最新のカーネルになる。コマンドから行なうのであれば次のようになる。\n\n$ mkdir temp\n$ cd temp/\n$ wget https://kernel.ubuntu.com/mainline/v6.10.6/amd64/linux-headers-6.10.6-061006-generic_6.10.6-061006.202408190440_amd64.deb https://kernel.ubuntu.com/mainline/v6.10.6/amd64/linux-headers-6.10.6-061006_6.10.6-061006.202408190440_all.deb https://kernel.ubuntu.com/mainline/v6.10.6/amd64/linux-image-unsigned-6.10.6-061006-generic_6.10.6-061006.202408190440_amd64.deb https://kernel.ubuntu.com/mainline/v6.10.6/amd64/linux-modules-6.10.6-061006-generic_6.10.6-061006.202408190440_amd64.deb\n$ sudo apt install ./*.deb\n$ reboot\n\n 再ログイン後、端末からカーネルのバージョンが新しくなっているか確認することをおすすめする。\n\n■ ビルド環境の準備\n\n 続けてライブラリのビルドを開始するが、その前に考えておきたいことがある。何らかのビルドを行なう場合、通常“たくさんのパッケージをインストールする”ことになる。現在使用しているUbuntuに、たくさんのパッケージをインストールすることは避けたほうがいい。\n\n 理由としてはいろいろあるが、まずはセキュリティ的な理由で、使用していようがいなかろうがインストールされているすべてのパッケージは潜在的に脆弱性を含み得る。現実的には使用していないパッケージにもセキュリティアップデートが入ることになり、あまり気分がよくない。かといって削除するのもなかなか難しいし、非常に手間がかかる。パッケージが多ければ多いほどUbuntu間のアップグレード(例えば22.04 LTSから24.04 LTSとか)に失敗する可能性も増える。\n\n であれば、ビルド専用の環境を用意してそちらを使用し、不要になったら削除したほうがいい。そういった理由から、ここではビルド環境を別途用意することをおすすめする。\n\n 具体的な方法としては、もちろんVirtualBoxなどの仮想マシンを用意する方法もある。しかしこれだけコンテナコンテナいわれる現在となっては、コンテナを作成する方法が楽だ。\n\n コンテナはカーネルの機能なので、実装はいろいろあるが、今回はsystemd-nspawnを使用する。理由としては、とにかく手軽だからだ。\n\n ではビルド用コンテナを作成していく。端末から次のコマンドを実行する。\n\n$ sudo apt install systemd-container debootstrap\n$ sudo mkdir -p /var/nspawn/xdna-driver\n$ sudo debootstrap noble /var/nspawn/xdna-driver\n\n これで実行可能なコンテナはできたものの、ユーザーが存在せずrootもパスワードがないため、ログインできない。よってrootにパスワードを付与する。\n\n$ sudo systemd-nspawn -D /var/nspawn/xdna-driver\n#\npasswd\n（パスワードを2回入力する）\n#\nexit\n\n 次のコマンドを実行し、rootユーザーでログインする。\n\n$ sudo systemd-nspawn -b -D /var/nspawn/xdna-driver\n\n 普通にログインプロンプトが表示されるので、ユーザー名(root)とパスワード(先ほど決めたもの)を入力してコンテナにログインしよう。\n\n 先ほどダウンロードした新しいカーネルのうち、ヘッダー(linux-headersから始まる2つのパッケージ)はコンテナ内でも使用するので、事前にコピーしておこう。次のコマンドを実行するのが簡単だ。\n\n$ sudo cp ~/temp/linux-headers-* /var/nspawn/xdna-driver/root\n\n■ ドライバのビルド\n\n 続けてコンテナ内でドライバのビルドを行なう。\n\n まずは/root/にあるカーネルヘッダーをインストールする。\n#\napt install ./linux-*.deb\n\n 最低限必要な設定としては、/etc/apt/sources.listの変更がある。Ubuntu 24.04 LTSでは/etc/apt/sources.list.d/ubuntu.sourcesじゃないのかという話はあるものの、一旦それはさておく。\n\n デフォルトでは\n\ndeb http://archive.ubuntu.com/ubuntu noble main\n\n になっているので、これを\n\ndeb http://jp.archive.ubuntu.com/ubuntu noble main universe\n\n に変更し、\n#\napt update\n\n を実行する。\n\n コマンドの補完が効かなくてしんどい場合は、bash-completionパッケージをインストールし、一旦ログインして再ログインするといい。\n\n 準備は整ったので、一気にビルドまでしてしまおう。\n#\nmkdir npu\n#\ncd npu/\n#\napt install git gcc-14 wget file\n#\ngit clone https://github.com/amd/xdna-driver.git\n#\ncd xdna-driver\n#\ngit submodule update --init --recursive\n#\ncd tools/\n#\n./amdxdna_deps.sh\n#\ncd ../xrt/build/\n#\n./build.sh -noert -noalveo\n#\napt install ./Release/xrt_*-amd64-xrt.deb ./Release/xrt_*-amd64-xbflash.deb\n#\ncd ../../build/\n#\n./build.sh -release\n#\n./build.sh -package\n#\nsource /opt/xilinx/xrt/setup.sh\n#\n./build.sh -example\n\n aptコマンドを実行しているところから分かるが、ビルド中にDebianパッケージが作成されるので、それらのパッケージを実環境のUbuntuにインストールすればXDNAが使用できるようになるという塩梅だ。\n\n gcc-14パッケージのインストールが謎なところだが、このカーネルがGCC 14でビルドされているので必要ということのようだ。\n\n■ どれだけのパッケージがインストールされたのか\n\n コンテナ内にどれだけのパッケージがインストールされたのかを確認してみよう。\n#\ndpkg -l |grep ^ii |wc -l\n\n 何もしていない状態(debootstrapコマンド実行直後)で220個、ビルド完了後で719個だった。筆者の趣味というか手癖で本来必要なパッケージよりも多少多めにインストールされているが、それをさておいても約500個のパッケージが追加でインストールされていることが分かった。\n\n 不要になったからといってこれらを1つ1つ調べて消していくのは(実は比較的楽に行なう方法はあるもののそれはさておいて)面倒なことこの上ないので、これこそがまさにビルド環境が必要な理由だ。不要になったら/var/nspawn/xdna-driver/以下を丸ごと削除すればいい。\n\n■ コンテナから抜ける方法\n\n systemd-nspawnのコンテナから抜ける方法は少し分かりにくく、poweroffコマンドを実行する。間違って実機の方で実行しないように注意しよう。実は筆者もやらかした。\n\n■ ドライバをインストールし、動作を確認する\n\n 先ほどビルドしたドライバをインストールしてみよう。実機でroot権限になる必要があるのに注意だ。\n\n$ sudo -i\n#\ncd /var/nspawn/xdna-driver/root/npu/xdna-driver/\n#\napt install ./xrt/build/Release/xrt_*-amd64-xrt.deb ./xrt/build/Release/xrt_*-amd64-xbflash.deb ./build/Release/xrt_plugin.*_ubuntu24.04-x86_64-amdxdna.deb\n\n テストを実行する。\n#\nsource /opt/xilinx/xrt/setup.sh\n#\n./build/example_build/example_noop_test tools/bins/1502_00/validate.xclbin\nHost test code start...\nHost test code is creating device object...\nHost test code is loading xclbin object...\nHost test code is creating kernel object...\nHost test code kernel name: DPU_PDI_0\nHost code is registering xclbin to the device...\nHost code is creating hw_context...\nHost test code is creating kernel object...\nHost test code allocate buffer objects...\nHost test code sync buffer objects to device...\nHost test code iterations (~10 seconds): 70000\nHost test microseconds: 8843152\nHost test average latency: 126 us/iter\nTEST PASSED!\n\n 無事テストをパスした。これでxdna-driverが動作するようになった。\n\n■ 実践的な使い道は……ない！\n\n 苦労してビルドしたのだから何かに使いたいのが人情というものである。しかし、筆者の知る限りでは実用的に使用できるアプリケーションは今のところ存在しない。WindowsではAMUSEなるものが存在しているが、Windows用のみだ。このあたり実はIntelのほうが先行しているが、筆者がNPU搭載ハードウェアを所有していない。\n\n というわけでAMDにより一層の奮励努力を期待したい。\nPC Watch,Ubuntu Japanese Team あわしろいくや",['https://newsatcl-pctr.c.yimg.jp/t/amd-img/20240824-00000018-imppcw-000-1-view.jpg?exp=10800'],"['https://news.yahoo.co.jp/articles/fd48684157517e2e0f0291ec276c8ec4142da5db/images/000', 'https://pc.watch.impress.co.jp/img/pcw/docs/1618/141/html/02.png.html', 'https://news.yahoo.co.jp/search?p=%23&source=article-body']"
